
================================================================================
File: dist\assets\popup.css
Size: 4.81 kB
================================================================================

:root{font-family:system-ui,Avenir,Helvetica,Arial,sans-serif;line-height:1.5;font-weight:400;color-scheme:light dark;color:#ffffffde;background-color:#242424;font-synthesis:none;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}a{font-weight:500;color:#646cff;text-decoration:inherit}a:hover{color:#535bf2}body{margin:0;display:flex;place-items:center;width:900px;height:700px}h1{font-size:3.2em;line-height:1.1}button{border-radius:8px;border:1px solid transparent;padding:.6em 1.2em;font-size:1em;font-weight:500;font-family:inherit;background-color:#1a1a1a;cursor:pointer;transition:border-color .25s}button:hover{border-color:#646cff}button:focus,button:focus-visible{outline:4px auto -webkit-focus-ring-color}@media (prefers-color-scheme: light){:root{color:#213547;background-color:#fff}a:hover{color:#747bff}button{background-color:#f9f9f9}}#root{width:100vw;height:100vh;margin:0;padding:0;overflow:hidden}.logo{height:6em;padding:1.5em;will-change:filter;transition:filter .3s}.logo:hover{filter:drop-shadow(0 0 2em #646cffaa)}.logo.react:hover{filter:drop-shadow(0 0 2em #61dafbaa)}@keyframes logo-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@media (prefers-reduced-motion: no-preference){a:nth-of-type(2) .logo{animation:logo-spin infinite 20s linear}}.card{padding:2em}.read-the-docs{color:#888}body{margin:0;padding:0;overflow:hidden}.popup-root{width:100vw;height:100vh;background:#f7f7f7;display:flex;flex-direction:column;overflow:hidden}.topbar{height:48px;display:flex;align-items:center;justify-content:space-between;padding:0 8px;background:#ff9100}.canvas{flex:1;position:relative;overflow:hidden;background:#fff;margin:4px;border-radius:4px}.toolbar{padding:4px;display:flex;gap:8px;background:#fff;border-bottom:1px solid #eee}.toolbar button{display:flex;align-items:center;justify-content:center;padding:4px 8px;min-width:32px;height:32px}.toolbar_icon{width:32px;aspect-ratio:1/1;object-fit:cover}.editor-toolbar{align-items:center;padding:6px;gap:10px;background:linear-gradient(180deg,#fff,#fbfbfb);border-bottom:1px solid rgba(0,0,0,.06);box-shadow:0 1px #00000008}.text-format-group,.block-group{display:flex;gap:6px;align-items:center}.format-btn,.block-btn{background:#fff;border:1px solid rgba(0,0,0,.06);padding:6px 8px;border-radius:6px;cursor:pointer;font-weight:600;color:#333;box-shadow:0 1px #00000005;transition:background .12s,transform .06s}.format-btn:hover,.block-btn:hover{transform:translateY(-1px)}.format-btn.active,.block-btn.active{background:#ff9100;color:#fff;border-color:#0000000f;box-shadow:0 4px 12px #ff91002e}.divider{width:1px;background:#0000000f;height:28px;margin:0 8px;border-radius:2px}.toolbar_icon{width:20px;height:20px;object-fit:cover}.bubble-text h1,.bubble-text h2,.bubble-text p{margin:0;padding:0;color:#222}.bubble-text h1{font-size:20px;font-weight:700}.bubble-text h2{font-size:16px;font-weight:600;color:#333}.bubble-text p{font-size:14px;font-weight:400;color:#222;line-height:1.3}.bubble-text{outline:none;color:#222;padding:6px;height:100%;width:100%;overflow:auto}.bubble{position:absolute;background:#ddd;border-radius:8px;box-shadow:0 4px 12px #00000026}.bubble-drag{height:20px;background:repeating-linear-gradient(to right,#fff,#fff 2px,transparent 2px,transparent 6px);cursor:move}.bubble-content{flex:1;padding:12px;font-family:sans-serif;position:relative}.bubble-text{width:100%;height:100%;outline:none;color:#000;font-size:16px;cursor:text;word-break:break-word}.bubble-image{max-width:100%;max-height:100%;object-fit:contain}.bubble-dot{position:absolute;width:15px;height:15px;background:#ff9100;border-radius:50%}.bubble-dot.top{top:-10px;left:50%;transform:translate(-50%)}.bubble-dot.bottom{bottom:-10px;left:50%;transform:translate(-50%)}.bubble-dot.left{left:-10px;top:50%;transform:translateY(-50%)}.bubble-dot.right{right:-10px;top:50%;transform:translateY(-50%)}.bubble-remove{position:absolute;top:-8px;right:-8px;width:22px;border:none;border-radius:50%;background:#f44;color:#fff;cursor:pointer;font-size:14px;display:flex;align-items:center;justify-content:center}.bubble-resize{position:absolute;right:0;bottom:0;width:0;height:0;border-left:18px solid transparent;border-top:18px solid transparent;border-right:18px solid #ff9100;border-bottom:18px solid #ff9100;cursor:nwse-resize;border-radius:8px}.bubble-link{position:absolute;width:12px;height:12px;border-radius:50%;background:#ff9100f2;border:2px solid #fff;box-shadow:0 2px 6px #0000001f;pointer-events:auto;z-index:30}.bubble-link.top{top:-6px;left:50%;transform:translate(-50%)}.bubble-link.left{left:-6px;top:50%;transform:translateY(-50%)}.bubble-link.right{right:-6px;top:50%;transform:translateY(-50%)}.bubble-link.bottom{bottom:-6px;left:50%;transform:translate(-50%)}


================================================================================
File: dist\background.js
Size: 546 B
================================================================================

const e=typeof browser<"u"?browser:chrome;function n(){try{const o=e.runtime.getURL("popup.html");e.windows&&e.windows.create?e.windows.create({url:o,type:"popup",width:900,height:700}):e.runtime&&e.runtime.openOptionsPage&&e.runtime.openOptionsPage()}catch(o){console.error("Failed to open window",o)}}e.action&&e.action.onClicked?e.action.onClicked.addListener(n):e.browserAction&&e.browserAction.onClicked&&e.browserAction.onClicked.addListener(n);e.alarms&&(e.alarms.create("noop",{periodInMinutes:59}),e.alarms.onAlarm.addListener(()=>{}));


================================================================================
File: dist\manifest.json
Size: 594 B
================================================================================

{
  "manifest_version": 2,
  "name": "Ouvrir Synapse",
  "version": "1.0.0",
  "description": "Extension moderne avec React + Vite",
  "browser_action": {
    "default_title": "Ouvrir Synapse"
  },
  "background": {
    "scripts": ["background.js"],
    "persistent": false
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "css": ["style.css"],
      "run_at": "document_idle"
    }
  ],
  "permissions": ["storage", "activeTab"],
  "host_permissions": ["<all_urls>"],
  "icons": {
    "48": "icons/vite.svg",
    "128": "icons/vite.svg"
  }
}


================================================================================
File: dist\popup.html
Size: 490 B
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Synapse Popup</title>
    <link rel="icon" type="image/svg+xml" href="icons/vite.svg" />
    <script type="module" crossorigin src="/assets/popup.js"></script>
    <link rel="stylesheet" crossorigin href="/assets/popup.css">
  </head>
  <body style="margin:0;padding:0;">
    <div id="root"></div>
  </body>
</html>


================================================================================
File: eslint.config.js
Size: 633 B
================================================================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])


================================================================================
File: popup.html
Size: 512 B
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Synapse Popup</title>
    <link rel="icon" type="image/svg+xml" href="icons/vite.svg" />
    <link rel="stylesheet" href="/src/index.css" />
    <link rel="stylesheet" href="/src/App.css" />
  </head>
  <body style="margin:0;padding:0;">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


================================================================================
File: public\manifest.json
Size: 594 B
================================================================================

{
  "manifest_version": 2,
  "name": "Ouvrir Synapse",
  "version": "1.0.0",
  "description": "Extension moderne avec React + Vite",
  "browser_action": {
    "default_title": "Ouvrir Synapse"
  },
  "background": {
    "scripts": ["background.js"],
    "persistent": false
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "css": ["style.css"],
      "run_at": "document_idle"
    }
  ],
  "permissions": ["storage", "activeTab"],
  "host_permissions": ["<all_urls>"],
  "icons": {
    "48": "icons/vite.svg",
    "128": "icons/vite.svg"
  }
}


================================================================================
File: README-EXTENSION.md
Size: 659 B
================================================================================

Testing the extension (Chrome / Firefox)

1. Build the project:

```bash
npm run build
```

2. In Chrome:
- Open chrome://extensions
- Enable Developer mode
- Click "Load unpacked" and select the project root (the folder that contains `manifest.json`).
- Click the extension icon. The popup should open and display the React app.

3. In Firefox:
- Open about:debugging#/runtime/this-firefox
- Click "Load Temporary Add-on..." and select `manifest.json` in the project root.
- Click the extension icon.

Notes:
- The popup HTML and assets are served from `dist/` after build.
- If you change code, rebuild before reloading the extension.


================================================================================
File: README.md
Size: 2.34 kB
================================================================================

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```


================================================================================
File: src\App.css
Size: 3.18 kB
================================================================================

#root {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

/* Reset default styles */
body {
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* Popup specific styles */
.popup-root {
  width: 100vw;
  height: 100vh;
  background: #f7f7f7;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.topbar {
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 8px;
  background: #ff9100;
}

.canvas {
  flex: 1;
  position: relative;
  overflow: hidden;
  background: #fff;
  margin: 4px;
  border-radius: 4px;
}

.toolbar {
  padding: 4px;
  display: flex;
  gap: 8px;
  background: #fff;
  border-bottom: 1px solid #eee;
}

.toolbar button {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 4px 8px;
  min-width: 32px;
  height: 32px;
}

.toolbar_icon {
  width: 32px;
  aspect-ratio: 1/1;
  object-fit: cover;
}

/* Editor toolbar styles */
.editor-toolbar {
  align-items: center;
  padding: 6px;
  gap: 10px;
  background: linear-gradient(180deg,#ffffff,#fbfbfb);
  border-bottom: 1px solid rgba(0,0,0,0.06);
  box-shadow: 0 1px 0 rgba(0,0,0,0.03);
}

.text-format-group, .block-group {
  display: flex;
  gap: 6px;
  align-items: center;
}

.format-btn, .block-btn {
  background: #fff;
  border: 1px solid rgba(0,0,0,0.06);
  padding: 6px 8px;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  color: #333;
  box-shadow: 0 1px 0 rgba(0,0,0,0.02);
  transition: background .12s, transform .06s;
}
.format-btn:hover, .block-btn:hover { transform: translateY(-1px) }
.format-btn.active, .block-btn.active {
  background: #ff9100;
  color: white;
  border-color: rgba(0,0,0,0.06);
  box-shadow: 0 4px 12px rgba(255,145,0,0.18);
}

/* divider */
.divider { width: 1px; background: rgba(0,0,0,0.06); height: 28px; margin: 0 8px; border-radius: 2px; }

/* small polish for toolbar icon buttons */
.toolbar_icon { width: 20px; height: 20px; object-fit: cover; }

/* content styles inside bubbles for the block elements */
.bubble-text h1, .bubble-text h2, .bubble-text p {
  margin: 0;
  padding: 0;
  color: #222;
}
.bubble-text h1 { font-size: 20px; font-weight: 700; }
.bubble-text h2 { font-size: 16px; font-weight: 600; color: #333; }
.bubble-text p { font-size: 14px; font-weight: 400; color: #222; line-height: 1.3; }

/* ensure contentEditable caret visible */
.bubble-text { outline: none; color: #222; padding: 6px; height: 100%; width: 100%; overflow: auto; }


================================================================================
File: src\App.tsx
Size: 12.6 kB
================================================================================

import React, { useCallback, useEffect, useRef, useState } from "react";
import { Bubble } from "./components/bubbles";
import { Links } from "./components/links";
import type { BubbleData } from "./types/bubble";
import type { LinkData } from "./types/link";
import "./App.css";

function randId() {
  return Math.random().toString(36).slice(2, 9);
}

export default function App() {
  // core state
  const [bubbles, setBubbles] = useState<BubbleData[]>([]);
  const [links, setLinks] = useState<LinkData[]>([]);
  const [tempLink, setTempLink] = useState<{
    startBubbleId: string;
    startSide: "top" | "bottom" | "left" | "right";
    x: number;
    y: number;
  } | null>(null);

  const [draggingId, setDraggingId] = useState<string | null>(null);
  const [resizingId, setResizingId] = useState<string | null>(null);
  const [focusNewBubbleId, setFocusNewBubbleId] = useState<string | null>(null);
  const canvasRef = useRef<HTMLDivElement | null>(null);

  const addTextIcon_URL = "/icons/addtext.png";
  const addImageIcon_URL = "/icons/addImage.png";
  const cleanIcon_URL = "/icons/clean.png";
  const exportPDF_URL = "/icons/exportPDF.png";

  // formatting UI state
  const [isBold, setIsBold] = useState(false);
  const [isItalic, setIsItalic] = useState(false);
  const [isUnderline, setIsUnderline] = useState(false);
  const [blockType, setBlockType] = useState<"H1" | "H2" | "P" | "">("");

  // keep popup open: placeholder listener
  useEffect(() => {
    function onWindowMessage(_: MessageEvent) {
      /* reserved */
    }
    window.addEventListener("message", onWindowMessage);
    return () => window.removeEventListener("message", onWindowMessage);
  }, []);

  // update formatting buttons when selection changes
  useEffect(() => {
    const updateState = () => {
      try {
        setIsBold(document.queryCommandState("bold"));
        setIsItalic(document.queryCommandState("italic"));
        setIsUnderline(document.queryCommandState("underline"));

        const sel = window.getSelection();
        if (!sel || !sel.anchorNode) {
          setBlockType("");
          return;
        }
        let el =
          sel.anchorNode.nodeType === 3
            ? (sel.anchorNode.parentElement as HTMLElement)
            : (sel.anchorNode as HTMLElement);
        while (el && el !== document.body) {
          const tag = el.tagName;
          if (tag === "H1" || tag === "H2" || tag === "P") {
            setBlockType(tag as any);
            return;
          }
          el = el.parentElement as HTMLElement;
        }
        setBlockType("P");
      } catch {
        /* ignore */
      }
    };
    document.addEventListener("selectionchange", updateState);
    return () => document.removeEventListener("selectionchange", updateState);
  }, []);

  const exec = useCallback((cmd: string, value?: string) => {
    try {
      document.execCommand(cmd, false, value);
      setIsBold(document.queryCommandState("bold"));
      setIsItalic(document.queryCommandState("italic"));
      setIsUnderline(document.queryCommandState("underline"));
    } catch {
      console.warn("execCommand failed");
    }
  }, []);

  const toggleBold = useCallback(() => exec("bold"), [exec]);
  const toggleItalic = useCallback(() => exec("italic"), [exec]);
  const toggleUnderline = useCallback(() => exec("underline"), [exec]);
  const applyBlock = useCallback(
    (tag: "H1" | "H2" | "P") => {
      exec("formatBlock", tag);
      setBlockType(tag);
    },
    [exec]
  );

  // Drop handling (single implementation)
  const onDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    const rect = canvasRef.current?.getBoundingClientRect();
    const x = e.clientX - (rect?.left || 0);
    const y = e.clientY - (rect?.top || 0);

    const file = e.dataTransfer?.files?.[0];
    if (file && file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = () => {
        setBubbles((prev) => [
          ...prev,
          { id: randId(), x, y, w: 200, h: 150, type: "image", content: String(reader.result) },
        ]);
      };
      reader.readAsDataURL(file);
      return;
    }

    const text = e.dataTransfer?.getData("text") || e.dataTransfer?.getData("text/plain");
    if (text) {
      setBubbles((prev) => [
        ...prev,
        { id: randId(), x, y, w: 220, h: 80, type: "text", content: text },
      ]);
    }
  }, []);

  const onDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
  }, []);

  // move/resize handlers
  function startMove(id: string, e: React.MouseEvent) {
    e.stopPropagation();
    setDraggingId(id);
  }
  function startResize(id: string, e: React.MouseEvent) {
    e.stopPropagation();
    setResizingId(id);
  }

  function onMouseMove(e: React.MouseEvent) {
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;

    if (draggingId) {
      setBubbles((prev) =>
        prev.map((b) =>
          b.id === draggingId
            ? { ...b, x: e.clientX - rect.left - b.w / 2, y: e.clientY - rect.top - b.h / 2 }
            : b
        )
      );
    }

    if (resizingId) {
      setBubbles((prev) =>
        prev.map((b) =>
          b.id === resizingId
            ? { ...b, w: Math.max(40, e.clientX - rect.left - b.x), h: Math.max(24, e.clientY - rect.top - b.y) }
            : b
        )
      );
    }

    if (tempLink) {
      setTempLink({ ...tempLink, x: e.clientX - rect.left, y: e.clientY - rect.top });
    }
  }

  function endMove() {
    setDraggingId(null);
    setResizingId(null);
    setTempLink(null);
  }

  // create bubble & focus logic
  const createNewTextBubble = useCallback(() => {
    const newBubble: BubbleData = { id: randId(), type: "text", content: "", x: 100, y: 100, w: 200, h: 100 };
    setBubbles((prev) => [...prev, newBubble]);
    return newBubble.id;
  }, []);

  // bubble modifications
  const handleMove = useCallback((id: string, x: number, y: number) => {
    setBubbles((prev) => prev.map((b) => (b.id === id ? { ...b, x, y } : b)));
  }, []);
  const handleResize = useCallback((id: string, w: number, h: number) => {
    setBubbles((prev) => prev.map((b) => (b.id === id ? { ...b, w, h } : b)));
  }, []);
  const handleContentChange = useCallback((id: string, content: string) => {
    setBubbles((prev) => prev.map((b) => (b.id === id ? { ...b, content } : b)));
  }, []);

  // links
  function onStartLink(bubbleId: string, side: string, e: React.MouseEvent) {
    e.stopPropagation();
    e.preventDefault();
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) {
      console.warn('onStartLink: no canvas rect');
      return;
    }
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    console.log('onStartLink', { bubbleId, side, x, y });
    setTempLink({ startBubbleId: bubbleId, startSide: side as any, x, y });
  }

  function onFinishLink(bubbleId: string, side: string, e: React.MouseEvent) {
    e.stopPropagation();
    e.preventDefault();
    console.log('onFinishLink', { bubbleId, side, tempLink });
    if (!tempLink) return;
    const type = window.confirm("Voulez-vous une flèche ? (OK = flèche, Annuler = ligne)") ? "arrow" : "line";
    const newLink: LinkData = {
      id: randId(),
      idStartBubble: tempLink.startBubbleId,
      idEndBubble: bubbleId,
      startSide: tempLink.startSide,
      endSide: side as any,
      type,
      color: "#ff9100",
    };
    setLinks(prev => [...prev, newLink]);
    setTempLink(null);
  }

  function removeBubble(id: string) {
    setBubbles((prev) => prev.filter((b) => b.id !== id));
  }
  function removeLink(id: string) {
    setLinks((prev) => prev.filter((l) => l.id !== id));
  }

  //export pdf 

// const exportPDF = async () => {
//   try {
//     const jsPDF = (await import("jspdf")).default;
//     const html2canvas = (await import("html2canvas")).default;
//     const canvasDiv = canvasRef.current;
//     if (!canvasDiv) return;
//     const canvasImage = await html2canvas(canvasDiv);
//     const imgData = canvasImage.toDataURL("image/png");
//     const pdf = new jsPDF({
//       orientation: "landscape",
//       unit: "px",
//       format: [canvasDiv.offsetWidth, canvasDiv.offsetHeight],
//     });
//     pdf.addImage(
//       imgData,
//       "PNG",
//       0,
//       0,
//       canvasDiv.offsetWidth,
//       canvasDiv.offsetHeight
//     );
//     pdf.save("synapse_canvas.pdf");
//   } catch (err) {
//     alert("Erreur export PDF: " + err);
//     console.error(err);
//   }
// };

  // Toolbar UI
  const Toolbar = () => (
    <div className="toolbar editor-toolbar" role="toolbar" aria-label="Text editor toolbar">
      <div className="text-format-group">
        <button className={`format-btn ${isBold ? "active" : ""}`} title="Gras (Ctrl/Cmd+B)" onMouseDown={(e) => e.preventDefault()} onClick={toggleBold}>B</button>
        <button className={`format-btn ${isItalic ? "active" : ""}`} title="Italique (Ctrl/Cmd+I)" onMouseDown={(e) => e.preventDefault()} onClick={toggleItalic}>I</button>
        <button className={`format-btn ${isUnderline ? "active" : ""}`} title="Souligné (Ctrl/Cmd+U)" onMouseDown={(e) => e.preventDefault()} onClick={toggleUnderline}>U</button>
      </div>

      <div className="divider" />

      <div className="block-group" role="group" aria-label="Paragraph style">
        <button className={`block-btn ${blockType === "H1" ? "active" : ""}`} title="Titre" onMouseDown={(e) => e.preventDefault()} onClick={() => applyBlock("H1")}>Titre</button>
        <button className={`block-btn ${blockType === "H2" ? "active" : ""}`} title="Sous-titre" onMouseDown={(e) => e.preventDefault()} onClick={() => applyBlock("H2")}>Sous-titre</button>
        <button className={`block-btn ${blockType === "P" ? "active" : ""}`} title="Corps" onMouseDown={(e) => e.preventDefault()} onClick={() => applyBlock("P")}>Corps</button>
      </div>

      <div style={{ flex: 1 }} />

      <div style={{ display: "flex", gap: 8 }}>
        <button
          onClick={() => {
            const newBubbleId = createNewTextBubble();
            setFocusNewBubbleId(newBubbleId);
          }}
        >
          <img className="toolbar_icon" src={addTextIcon_URL} alt="Ajouter du texte" />
        </button>

        <button
          onClick={() => {
            const url = prompt("Image URL?");
            if (url) setBubbles((prev) => [...prev, { id: randId(), x: 80, y: 120, w: 200, h: 140, type: "image", content: url }]);
          }}
        >
          <img className="toolbar_icon" src={addImageIcon_URL} alt="Ajouter une image" />
        </button>

        <button onClick={() => setBubbles([])}>
          <img className="toolbar_icon" src={cleanIcon_URL} alt="clean" />
        </button>
        {/* <button onClick={exportPDF}>
          <img className="toolbar_icon" src={exportPDF_URL} alt="clean" />
        </button> */}
      </div>
    </div>
  );

  return (
    <div className="popup-root">
      <div className="topbar">
        <div style={{ display: "flex", alignItems: "center" }}>
          <img src="/vite.svg" alt="logo" style={{ height: 32, marginRight: 8 }} />
          <strong style={{ color: "#fff" }}>Synapse</strong>
        </div>
        <button title="Close" onClick={() => window.close()} style={{ background: "transparent", border: "none", color: "#fff", fontSize: 18, cursor: "pointer", padding: "4px" }}>
          ✕
        </button>
      </div>

      <Toolbar />

      <div ref={canvasRef} className="canvas" onDrop={onDrop} onDragOver={onDragOver} onMouseMove={onMouseMove} onMouseUp={endMove} onMouseLeave={endMove}>
        <Links links={links} bubbles={bubbles} tempLink={tempLink} onRemoveLink={removeLink} />

        {bubbles.map((bubble) => (
          <Bubble
            key={bubble.id}
            data={bubble}
            onMove={handleMove}
            onResize={handleResize}
            onRemove={removeBubble}
            onContentChange={handleContentChange}
            onStartMove={startMove}
            onStartResize={startResize}
            onStartLink={onStartLink}
            onFinishLink={onFinishLink}
          />
        ))}
      </div>
    </div>
  );
}


================================================================================
File: src\background.ts
Size: 1.21 kB
================================================================================

// import browser from 'webextension-polyfill-ts'
import type { Browser } from 'webextension-polyfill-ts';

declare const chrome: Browser
const api: any = typeof browser !== 'undefined' ? browser : chrome;

// background.js - open a persistent popup window when the action is clicked
function openWindow() {
  try {
    const url = api.runtime.getURL('popup.html');
    // Firefox: browser.windows.create; Chrome compatibility handled as well
    if (api.windows && api.windows.create) {
      api.windows.create({ url, type: 'popup', width: 900, height: 700 });
    } else if (api.runtime && api.runtime.openOptionsPage) {
      // fallback
      api.runtime.openOptionsPage();
    }
  } catch (e) {
    console.error('Failed to open window', e);  
  }
}

if (api.action && api.action.onClicked) {
  api.action.onClicked.addListener(openWindow);
} else if (api.browserAction && api.browserAction.onClicked) {
  api.browserAction.onClicked.addListener(openWindow);
}

// keep worker alive with a simple alarm (no-op) to improve responsiveness in some browsers
if (api.alarms) {
  api.alarms.create('noop', { periodInMinutes: 59 });
  api.alarms.onAlarm.addListener(() => {});
}


================================================================================
File: src\components\bubble.css
Size: 2.49 kB
================================================================================

.bubble {
  position: absolute;
  background: #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Drag zone */
.bubble-drag {
  height: 20px;
  background: repeating-linear-gradient(
    to right,
    #fff,
    #fff 2px,
    transparent 2px,
    transparent 6px
  );
  cursor: move;
}

/* Content */
.bubble-content {
  flex: 1;
  padding: 12px;
  font-family: sans-serif;
  position: relative;
}

.bubble-text {
  width: 100%;
  height: 100%;
  outline: none;
  color: #000;
  font-size: 16px;
  cursor: text;
  word-break: break-word;
}

.bubble-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

/* Décorations oranges */
.bubble-dot {
  position: absolute;
  width: 15px;
  height: 15px;
  background: #ff9100;
  border-radius: 50%;
}

.bubble-dot.top {
  top: -10px;
  left: 50%;
  transform: translateX(-50%);
}
.bubble-dot.bottom {
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
}
.bubble-dot.left {
  left: -10px;
  top: 50%;
  transform: translateY(-50%);
}
.bubble-dot.right {
  right: -10px;
  top: 50%;
  transform: translateY(-50%);
}

/* Remove button */
.bubble-remove {
  position: absolute;
  top: -8px;
  right: -8px;
  width: 22px;

  border: none;
  border-radius: 50%;
  background: #ff4444;
  color: #fff;
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Resize handle (triangle) */
.bubble-resize {
  position: absolute;
  right: 0;
  bottom: 0;
  width: 0;
  height: 0;
  border-left: 18px solid transparent;
  border-top: 18px solid transparent;
  border-right: 18px solid #ff9100;
  border-bottom: 18px solid #ff9100;
  cursor: nwse-resize;
  border-radius : 8px;
}

.bubble-link {
  position: absolute;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: rgba(255,145,0,0.95); /* visible for debug; set lower opacity or transparent later */
  border: 2px solid #fff;
  box-shadow: 0 2px 6px rgba(0,0,0,0.12);
  pointer-events: auto;
  z-index: 30;
}

/* position helpers (if you already have them) */
.bubble-link.top { top: -6px; left: 50%; transform: translateX(-50%); }
.bubble-link.left { left: -6px; top: 50%; transform: translateY(-50%); }
.bubble-link.right { right: -6px; top: 50%; transform: translateY(-50%); }
.bubble-link.bottom { bottom: -6px; left: 50%; transform: translateX(-50%); }


================================================================================
File: src\components\bubbles.tsx
Size: 4.36 kB
================================================================================

import React, { useCallback, useEffect, useRef } from "react";
import type { BubbleData } from "../types/bubble";
import "./bubble.css";

type BubbleProps = {
  data: BubbleData;
  onMove: (id: string, x: number, y: number) => void;
  onResize: (id: string, w: number, h: number) => void;
  onRemove: (id: string) => void;
  onContentChange: (id: string, content: string) => void;
  onStartMove: (id: string, e: React.MouseEvent) => void;
  onStartResize: (id: string, e: React.MouseEvent) => void;
  onStartLink: (id: string, side: string, e: React.MouseEvent) => void;
  onFinishLink: (id: string, side: string, e: React.MouseEvent) => void;
};

export const Bubble: React.FC<BubbleProps> = ({
  data,
  onRemove,
  onContentChange,
  onStartMove,
  onStartResize,
  onStartLink,
  onFinishLink,
}) => {
  const textRef = useRef<HTMLDivElement | null>(null);

  // focus le contenu quand c'est une nouvelle bulle texte vide
  useEffect(() => {
    if (data.type === "text" && data.content === "" && textRef.current) {
      const el = textRef.current;
      el.focus();
      const range = document.createRange();
      range.selectNodeContents(el);
      range.collapse(true);
      const sel = window.getSelection();
      if (sel) {
        sel.removeAllRanges();
        sel.addRange(range);
      }
    }
  }, [data.type, data.content]);

  const handleContentBlur = useCallback(
    (e: React.FocusEvent<HTMLDivElement>) => {
      const text = (e.target as HTMLDivElement).innerText;
      onContentChange(data.id, text);
    },
    [data.id, onContentChange]
  );

  return (
    <div className="bubble" style={{ left: data.x, top: data.y, width: data.w, height: data.h }}>
      {/* central drag handle (invisible bar or small handle) */}
      <div
        className="bubble-drag"
        onMouseDown={(e) => onStartMove(data.id, e)}
        title="Glisser pour déplacer"
      />

      {/* move handles (small orange circles) */}
          {/* Removed duplicate move handles */}

      {/* link handles: use pointer events and stop propagation */}
      <div
        className="bubble-link top"
        onPointerDown={(e) => { e.stopPropagation(); e.preventDefault(); onStartLink(data.id, "top", e as unknown as React.MouseEvent); }}
        onPointerUp={(e) => { e.stopPropagation(); e.preventDefault(); onFinishLink(data.id, "top", e as unknown as React.MouseEvent); }}
      />
      <div
        className="bubble-link left"
        onPointerDown={(e) => { e.stopPropagation(); e.preventDefault(); onStartLink(data.id, "left", e as unknown as React.MouseEvent); }}
        onPointerUp={(e) => { e.stopPropagation(); e.preventDefault(); onFinishLink(data.id, "left", e as unknown as React.MouseEvent); }}
      />
      <div
        className="bubble-link right"
        onPointerDown={(e) => { e.stopPropagation(); e.preventDefault(); onStartLink(data.id, "right", e as unknown as React.MouseEvent); }}
        onPointerUp={(e) => { e.stopPropagation(); e.preventDefault(); onFinishLink(data.id, "right", e as unknown as React.MouseEvent); }}
      />
      <div
        className="bubble-link bottom"
        onPointerDown={(e) => { e.stopPropagation(); e.preventDefault(); onStartLink(data.id, "bottom", e as unknown as React.MouseEvent); }}
        onPointerUp={(e) => { e.stopPropagation(); e.preventDefault(); onFinishLink(data.id, "bottom", e as unknown as React.MouseEvent); }}
      />

      {/* remove button */}
      <button
        className="bubble-remove"
        onClick={() => onRemove(data.id)}
        aria-label="Supprimer la bulle"
      >
        ✕
      </button>

      <div className="bubble-content">
        {data.type === "text" ? (
          <div
            ref={textRef}
            contentEditable
            suppressContentEditableWarning
            className="bubble-text"
            onBlur={handleContentBlur}
          >
            {data.content}
          </div>
        ) : (
          <img src={data.content} alt="img" className="bubble-image" />
        )}
      </div>

      {/* resize handle (bottom-right) */}
      <div
        className="bubble-resize"
        onMouseDown={(e) => onStartResize(data.id, e)}
        title="Redimensionner"
      />
    </div>
  );
};


================================================================================
File: src\components\link.css
Size: 0 B
================================================================================



================================================================================
File: src\components\links.tsx
Size: 2.97 kB
================================================================================

import React from "react";
import type { LinkData } from "../types/link";
import type { BubbleData } from "../types/bubble";
import "./link.css";

type TempLink = {
  startBubbleId: string;
  startSide: "top" | "bottom" | "left" | "right";
  x: number;
  y: number;
};

type LinksProps = {
  links: LinkData[];
  bubbles: BubbleData[];
  tempLink?: TempLink | null;
  onRemoveLink: (id: string) => void;
};

function getDotPosition(
  bubble: BubbleData,
  side: "top" | "bottom" | "left" | "right"
) {
  switch (side) {
    case "top":
      return { x: bubble.x + bubble.w / 2, y: bubble.y };
    case "bottom":
      return { x: bubble.x + bubble.w / 2, y: bubble.y + bubble.h };
    case "left":
      return { x: bubble.x, y: bubble.y + bubble.h / 2 };
    case "right":
      return { x: bubble.x + bubble.w, y: bubble.y + bubble.h / 2 };
  }
}

export const Links: React.FC<LinksProps> = ({
  links,
  bubbles,
  tempLink,
  onRemoveLink,
}) => {
  return (
    <svg
      className="links-layer"
      style={{
        position: "absolute",
        width: "100%",
        height: "100%",
        top: 0,
        left: 0,
        pointerEvents: "none",
      }}
    >
      {links.map((link) => {
        const startBubble = bubbles.find((b) => b.id === link.idStartBubble);
        const endBubble = bubbles.find((b) => b.id === link.idEndBubble);
        if (!startBubble || !endBubble) return null;

        const start = getDotPosition(startBubble, link.startSide);
        const end = getDotPosition(endBubble, link.endSide);

        return (
          <line
            key={link.id}
            x1={start.x}
            y1={start.y}
            x2={end.x}
            y2={end.y}
            stroke={link.color}
            strokeWidth="2"
            markerEnd={link.type === "arrow" ? "url(#arrowhead)" : undefined}
            style={{ cursor: "pointer", pointerEvents: "auto" }}
            onContextMenu={(e) => {
              e.preventDefault();
              onRemoveLink(link.id);
            }}
          />
        );
      })}

      {tempLink && (() => {
        const startBubble = bubbles.find(
          (b) => b.id === tempLink.startBubbleId
        );
        if (!startBubble) return null;
        const start = getDotPosition(startBubble, tempLink.startSide);

        return (
          <line
            x1={start.x}
            y1={start.y}
            x2={tempLink.x}
            y2={tempLink.y}
            stroke="#ff9100"
            strokeWidth="2"
            strokeDasharray="4"
          />
        );
      })()}

      <defs>
        <marker
          id="arrowhead"
          markerWidth="10"
          markerHeight="7"
          refX="10"
          refY="3.5"
          orient="auto"
        >
          <polygon points="0 0, 10 3.5, 0 7" fill="#ff9100" />
        </marker>
      </defs>
    </svg>
  );
};


================================================================================
File: src\index.css
Size: 1.21 kB
================================================================================

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  width: 900px;
  height: 700px;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


================================================================================
File: src\main.tsx
Size: 240 B
================================================================================

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


================================================================================
File: src\types\bubble.ts
Size: 142 B
================================================================================

export type BubbleData = {
  id: string
  x: number
  y: number
  w: number
  h: number
  type: 'text' | 'image'
  content: string
}


================================================================================
File: src\types\link.ts
Size: 230 B
================================================================================

export type LinkData = {
  id: string
  idStartBubble: string
  idEndBubble: string
  startSide: 'top' | 'bottom' | 'left' | 'right'
  endSide: 'top' | 'bottom' | 'left' | 'right'
  type: 'arrow' | 'line'
  color: string
}

================================================================================
File: src\vite-env.d.ts
Size: 39 B
================================================================================

/// <reference types="vite/client" />


================================================================================
File: tsconfig.app.json
Size: 729 B
================================================================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


================================================================================
File: tsconfig.json
Size: 126 B
================================================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


================================================================================
File: tsconfig.node.json
Size: 655 B
================================================================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


================================================================================
File: vite.config.ts
Size: 1.01 kB
================================================================================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react-swc'
import { fileURLToPath } from 'url'
import { dirname, resolve } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    rollupOptions: {
      input: {
        popup: resolve(__dirname, 'popup.html'),
        background: resolve(__dirname, 'src/background.ts'),
        // content: resolve(__dirname, 'src/content-script.ts')
      },
      output: {
        format: 'es',               // ✅ ESM moderne
        inlineDynamicImports: false,
        entryFileNames: (chunk) => {
          if (chunk.name === 'background') return 'background.js'
          if (chunk.name === 'content') return 'content-script.js'
          return 'assets/[name].js'
        },
        chunkFileNames: 'assets/[name].js',
        assetFileNames: 'assets/[name].[ext]'
      }
    }
  }
})
